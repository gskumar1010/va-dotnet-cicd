apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd,sonarqube
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\nNexus: admin/admin123\nSonarQube: admin/admin\nGogs Git Server: gogs/gogs"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
- displayName: Deploy Eclipse Che
  description: Deploy Eclipse Che in order to use as an online IDE for changing code in this demo
  value: "false"
  name: DEPLOY_CHE
  required: true
- displayName: Ephemeral
  description: Use no persistent storage for Gogs and Nexus
  value: "true"
  name: EPHEMERAL
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
- displayName: Integrate Quay.io
  description: Integrate image build and deployment with Quay.io
  value: "false"
  name: ENABLE_QUAY
  required: true
- displayName: Quay.io Username
  description: Quay.io username to push the images to va-dotnet-project repository on your Quay.io account
  name: QUAY_USERNAME
- displayName: Quay.io Password
  description: Quay.io password to push the images to va-dotnet-project repository on your Quay.io account
  name: QUAY_PASSWORD
- displayName: Quay.io Image Repository
  description: Quay.io repository for pushing VA DOTNET Project container images
  name: QUAY_REPOSITORY
  required: true
  value: va-dotnet-project-app
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: "ImageStream"
  metadata:
    name: "va-dotnet-project"
    namespace: ${DEV_PROJECT}
- apiVersion: v1
  kind: "BuildConfig"
  metadata:
    name: "va-dotnet-project-bc"
    annotations:
      description: "Defines how to build the VA DOTNET Project app."
    labels:
      app: va-dotnet-project
    namespace: ${DEV_PROJECT}
  spec:
    completionDeadlineSeconds: 3600
    env:
      - name: "GIT_SSL_NO_VERIFY"
        value: "true"
    source:
      type: "Git"
      git:
        ref: master
        uri: GOGS_SVC_URL/gogs/sample-db-conn.git
      contextDir: "/"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
    output:
      to:
        kind: "ImageStreamTag"
        name: "va-dotnet-project:latest"
# Pipeline

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: va-dotnet-project-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        - name: ENABLE_QUAY
          value: ${ENABLE_QUAY}
        jenkinsfile: |-
          pipeline {
              agent any
              stages {

                stage('Build Application') {
                  agent { label 'dotnetcore22' }
                  steps {
                   git branch: 'master', url: 'http://gogs:3000/gogs/sample-db-conn.git'
                   sh "dotnet build"
                  }
                }

                stage('Build Image') {
                  agent { label 'base' }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          openshift.selector("bc", "va-dotnet-project-bc").startBuild("--wait=true")
                        }
                      }
                    }
                  }
                }

                stage('Scan Codebase/Code Analysis') {
                  agent { label 'sonarqube' }
                  steps {
                      git branch: 'master', url: 'http://gogs:3000/gogs/sample-db-conn.git'
                      sh "dotnet sonarscanner begin /k:va-dotnet-project /d:sonar.host.url=http://sonarqube:9000"
                      sh "dotnet build"
                      sh "dotnet sonarscanner end"
                  }
                }

                stage('Deploy DEV') {
                  steps {
                    script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEV_PROJECT) {
                            openshift.selector("dc", "va-dotnet-project").rollout().latest();
                          }
                        }
                    }
                  }
                }


                stage('Promote to STAGE?') {
                 
                  steps {
                    timeout(time:15, unit:'MINUTES') {
                        input message: "Promote to STAGE?", ok: "Promote"
                    }

                    script {
                      openshift.withCluster() {
                          openshift.tag("${env.DEV_PROJECT}/va-dotnet-project:latest", "${env.STAGE_PROJECT}/va-dotnet-project:stage")
                      }
                    }
                  }
                }

                stage('Deploy STAGE') {
                  agent { label 'base' }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.STAGE_PROJECT) {
                          openshift.selector("dc", "va-dotnet-project").rollout().latest();
                        }
                      }
                    }
                  }
                }
              }
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    base: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>base</name>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>base</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes/>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>docker.io/openshift/jenkins-slave-base-centos7</image>
            <privileged>false</privileged>
            <alwaysPullImage>true</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    dotnetcore22: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>dotnetcore22</name>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>dotnetcore22</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes/>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/dotnet/dotnet-22-jenkins-slave-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    sonarqube: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>sonar-dotnet</name>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>sonar-dotnet</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes/>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>docker-registry.default.svc:5000/openshift/jenkins-slave-sonarqube-dotnet</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>

# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-demo-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            # adjust jenkins
            oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi
            oc label dc jenkins app=jenkins --overwrite

            # setup dev env
            #oc import-image mssql --from=openshift/mssql --confirm -n ${DEV_PROJECT}
            #oc new-app mssql --name=mssql-2017  -p NAME=mssql-2017 -p ACCEPT_EULA=Y -p NAMESPACE=`oc project -q` -n ${DEV_PROJECT}



            if [ "${ENABLE_QUAY}" == "true" ] ; then
              # cicd
              oc create secret generic quay-cicd-secret --from-literal="username=${QUAY_USERNAME}" --from-literal="password=${QUAY_PASSWORD}" -n ${CICD_NAMESPACE}
              oc label secret quay-cicd-secret credential.sync.jenkins.openshift.io=true -n ${CICD_NAMESPACE}

              # dev
              oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${DEV_PROJECT}
              oc new-build --name=va-dotnet-project --image-stream=va-dotnet-project:latest --binary=true --push-secret=quay-cicd-secret --to-docker --to='quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest' -n ${DEV_PROJECT}
              oc new-app --name=va-dotnet-project --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest --allow-missing-images -n ${DEV_PROJECT}
              oc set triggers dc va-dotnet-project --remove-all -n ${DEV_PROJECT}
              oc patch dc va-dotnet-project -p '{"spec": {"template": {"spec": {"containers": [{"name": "va-dotnet-project", "imagePullPolicy": "Always"}]}}}}' -n ${DEV_PROJECT}
              oc delete is va-dotnet-project -n ${DEV_PROJECT}
              oc secrets link default quay-cicd-secret --for=pull -n ${DEV_PROJECT}

              # stage
              oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${STAGE_PROJECT}
              oc new-app --name=va-dotnet-project --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:stage --allow-missing-images -n ${STAGE_PROJECT}
              oc set triggers dc va-dotnet-project --remove-all -n ${STAGE_PROJECT}
              oc patch dc va-dotnet-project -p '{"spec": {"template": {"spec": {"containers": [{"name": "va-dotnet-project", "imagePullPolicy": "Always"}]}}}}' -n ${STAGE_PROJECT}
              oc delete is va-dotnet-project -n ${STAGE_PROJECT}
              oc secrets link default quay-cicd-secret --for=pull -n ${STAGE_PROJECT}
            else
              # dev
              oc new-build --name=va-dotnet-project --image-stream=va-dotnet-project:latest --binary=true -n ${DEV_PROJECT}
              oc new-app va-dotnet-project:latest --allow-missing-images -n ${DEV_PROJECT}
              oc set triggers dc -l app=va-dotnet-project --containers=va-dotnet-project --from-image=va-dotnet-project:latest --manual -n ${DEV_PROJECT}

              # stage
              oc new-build --name=va-dotnet-project --image-stream=va-dotnet-project:latest --binary=true -n ${STAGE_PROJECT}
              oc new-app va-dotnet-project:stage --allow-missing-images -n ${STAGE_PROJECT}
              oc set triggers dc -l app=va-dotnet-project --containers=va-dotnet-project --from-image=va-dotnet-project:stage --manual -n ${STAGE_PROJECT}
            fi

            # dev project
            oc expose dc/va-dotnet-project --port=8080 -n ${DEV_PROJECT}
            oc expose svc/va-dotnet-project -n ${DEV_PROJECT}
            oc set env dc/va-dotnet-project --overwrite ASPNETCORE_ENVIRONMENT=Development ASPNETCORE_URLS=http://*:8080 va-dotnet-project-context=server='mssql-2017;user=sa;password=admin12345678;initial catalog=test;' -n ${DEV_PROJECT}
            #oc set probe dc/va-dotnet-project --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
            #oc set probe dc/va-dotnet-project --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
            oc rollout cancel dc/va-dotnet-project -n ${STAGE_PROJECT}

            # stage project
            oc expose dc/va-dotnet-project --port=8080 -n ${STAGE_PROJECT}
            oc expose svc/va-dotnet-project -n ${STAGE_PROJECT}
            oc set env dc/va-dotnet-project --overwrite ASPNETCORE_ENVIRONMENT=Testing ASPNETCORE_URLS=http://*:8080 va-dotnet-project-context=server='mssql-2017;user=sa;password=admin12345678;initial catalog=test;' -n ${STAGE_PROJECT}
            #oc set probe dc/va-dotnet-project --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
            #oc set probe dc/va-dotnet-project --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
            oc rollout cancel dc/va-dotnet-project -n ${DEV_PROJECT}

            # deploy gogs
            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

            if [ "${EPHEMERAL}" == "true" ] ; then
            curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml| oc process -f - \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=DATABASE_VERSION=10 \
                  --param=SKIP_TLS_VERIFY=true \
            | oc apply -f -
            else
            curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml | oc process -f - \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=DATABASE_VERSION=10 \
                  --param=SKIP_TLS_VERIFY=true \
            | oc apply -f -
            fi

            sleep 5

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
            else
              oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-persistent-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
            fi

            if [ "${DEPLOY_CHE}" == "true" ] ; then
              oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-workspace-service-account.yaml \
                  --param SERVICE_ACCOUNT_NAMESPACE=$CICD_NAMESPACE --param=SERVICE_ACCOUNT_NAME=che-workspace | oc create -f -

              oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-server-template.yaml \
                --param ROUTING_SUFFIX=$HOSTNAME \
                --param CHE_MULTIUSER=false \
                --param CHE_VERSION="6.19.0" \
                --param CHE_INFRA_KUBERNETES_SERVICE__ACCOUNT__NAME=che-workspace | oc create -f -

              oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi
            fi

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
            fi

            oc set resources dc/nexus --requests=cpu=200m,memory=1Gi --limits=cpu=2,memory=4Gi

            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            echo -n "Waiting for gogs to come up..."
            while true; do
              _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)
              if [ "$_RETURN" = "200" ] || [ "$_RETURN" = "302" ]; then
                echo "done"
                break
              fi
              if [ "$_RETURN" = "503" ]; then
                oc delete $(oc get po -o name | grep gogs | grep -v gogs-postgresql)
              fi
              echo -n "."
              sleep 5
            done

            sleep 10

            cat <<EOF > /tmp/data.json
            {
              "clone_addr": "https://github.com/vsrn09/sample-db-conn.git",
              "uid": 1,
              "repo_name": "sample-db-conn"
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to import sample-db-conn GitHub repo"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/va-dotnet-project-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/sample-db-conn/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              cat /tmp/curl.log
              exit 255
            fi

            oc patch bc/va-dotnet-project-bc -p '{"spec":{"source":{"git":{"uri": "http://'"$GOGS_HOSTNAME"'/gogs/sample-db-conn.git"}}}}' -n ${DEV_PROJECT}

          image: openshift/origin:v3.11
          name: cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
